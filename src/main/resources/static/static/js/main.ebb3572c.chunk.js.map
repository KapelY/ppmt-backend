{"version":3,"sources":["actions/projectActions.js","actions/types.js","components/Project/ProjectItem.js","components/Project/CreateProjectButton.js","components/Dashboard.js","securityUtils/setJWTToken.js","actions/securityActions.js","components/Layout/Header.js","components/Project/AddProject.js","reducers/errorReducer.js","reducers/projectReducer.js","reducers/backlogReducer.js","reducers/secutiryReducer.js","reducers/index.js","store.js","components/Project/UpdateProject.js","components/ProjectBoard/ProjectTask/ProjectTask.js","actions/backlogActions.js","components/ProjectBoard/Backlog.js","components/ProjectBoard/ProjectBoard.js","components/ProjectBoard/ProjectTask/AddProjectTask.js","components/ProjectBoard/ProjectTask/UpdateProjectTask.js","components/Layout/Landing.js","components/UserManagement/Register.js","components/UserManagement/Login.js","securityUtils/SecureRoute.js","App.js","serviceWorker.js","index.js"],"names":["createProject","project","history","dispatch","a","axios","post","push","type","payload","response","data","ProjectItem","onDeleteClick","id","props","deleteProject","this","className","projectIdentifier","projectName","description","to","onClick","bind","Component","connect","window","confirm","delete","CreateProjectButton","Fragment","Dashboard","getProjects","projects","map","key","protoTypes","PropTypes","object","isRequired","func","state","get","res","setJWTToken","token","defaults","headers","common","logout","localStorage","removeItem","Header","location","href","headerLinks","security","validToken","user","userIsAuthenticated","fullName","userIsNotAuthenticated","data-toggle","data-target","AddProject","undefined","start_date","end_date","errors","onChange","onSubmit","nextProps","nextContext","setState","e","target","name","value","preventDefault","newProject","classnames","placeholder","propType","initialState","project_tasks","project_task","booleanActionPayload","combineReducers","action","filter","backlog","projectSequence","middleware","thunk","ReactReduxDevTools","__REDUX_DEVTOOLS_EXTENSION__","store","navigator","userAgent","includes","createStore","rootReducer","compose","applyMiddleware","UpdateProject","match","params","getProject","updateProject","disabled","ProjectTask","backlog_id","pt_id","deleteProjectTask","priorityString","priorityClass","priority","summary","acceptanceCriteria","Backlog","tasks","project_tasks_prop","todoItems","inProgressItems","doneItems","i","length","status","ProjectBoard","getBacklog","boardContent","projectNotFound","role","boardAlgorithm","AddProjectTask","newTask","dueDate","addProjectTask","UpdateProjectTask","create_At","getProjectTask","console","log","updateProjectTask","patch","Landing","Register","newUser","username","password","confirmPassword","createNewUser","Login","LoginRequest","login","setItem","decoded","jwt_decode","component","otherProps","render","jwtToken","decoded_jwtToken","currentTime","Date","now","exp","App","exact","path","Boolean","hostname","ReactDOM","document","getElementById","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.ebb3572c.chunk.js","sourcesContent":["import axios from \"axios\";\nimport {GET_ERRORS, GET_PROJECT, GET_PROJECTS, DELETE_PROJECT} from \"./types\";\n\nexport const createProject = (project, history) => async dispatch => {\n    try {\n        await axios.post(\"/api/project\", project);\n        history.push(\"/dashboard\");\n        dispatch({\n            type: GET_ERRORS,\n            payload: {}\n        })\n    } catch (err) {\n        dispatch({\n            type: GET_ERRORS,\n            payload: err.response.data\n        })\n    }\n};\n\nexport const getProjects = () => async dispatch => {\n    const res = await axios.get(\"/api/project/all\");\n    dispatch({\n        type: GET_PROJECTS,\n        payload: res.data\n    })\n};\n\nexport const getProject = (id, history) => async dispatch => {\n    try {\n        const res = await axios.get(`/api/project/${id}`);\n        dispatch({\n            type: GET_PROJECT,\n            payload: res.data\n        })\n    } catch (error) {\n        history.push(\"/dashboard\")\n    }\n};\n\nexport const deleteProject = id => async dispatch => {\n    if (window.confirm(\"Are you sure? This will delete all the data related to it\"))\n        await axios.delete(`/api/project/${id}`);\n    dispatch({\n        type: DELETE_PROJECT,\n        payload: id\n    })\n};\n","export const GET_ERRORS = \"GET_ERRORS\";\nexport const GET_PROJECTS = \"GET_PROJECTS\";\nexport const GET_PROJECT = \"GET_PROJECT\";\nexport const DELETE_PROJECT = \"DELETE_PROJECT\";\n\nexport const GET_BACKLOG = \"GET_BACKLOG\";\nexport const GET_PROJECT_TASK = \"GET_PROJECT_TASK\";\nexport const DELETE_PROJECT_TASK = \"DELETE_PROJECT_TASK\";\nexport const SET_CURRENT_USER = \"SET_CURRENT_USER\";\n","import React, {Component} from 'react';\nimport {Link} from \"react-router-dom\";\nimport PropTypes from \"prop-types\";\nimport {connect} from \"react-redux\";\nimport {deleteProject} from \"../../actions/projectActions\";\n\nclass ProjectItem extends Component {\n\n    onDeleteClick = id => {\n        this.props.deleteProject(id);\n    };\n\n    render() {\n        const {project} = this.props;\n        return (\n            <div className=\"container\">\n                <div className=\"card card-body bg-light mb-3\">\n                    <div className=\"row\">\n                        <div className=\"col-2\">\n                            <span className=\"mx-auto\">{project.projectIdentifier}</span>\n                        </div>\n                        <div className=\"col-lg-6 col-md-4 col-8\">\n                            <h3>{project.projectName}</h3>\n                            <p>{project.description}</p>\n                        </div>\n                        <div className=\"col-md-4 d-none d-lg-block\">\n                            <ul className=\"list-group\">\n                                <Link to={`/projectBoard/${project.projectIdentifier}`}>\n                                    <li className=\"list-group-item board\">\n                                        <i className=\"fa fa-flag-checkered pr-1\"> Project Board </i>\n                                    </li>\n                                </Link>\n                                <Link to={`/updateProject/${project.projectIdentifier}`}>\n                                    <li className=\"list-group-item update\">\n                                        <i className=\"fa fa-edit pr-1\"> Update Project Info</i>\n                                    </li>\n                                </Link>\n                                <li className=\"list-group-item delete\" onClick={this.onDeleteClick.bind(this,\n                                    project.projectIdentifier)}>\n                                    <i className=\"fa fa-minus-circle pr-1\"> Delete Project</i>\n                                </li>\n                            </ul>\n                        </div>\n                    </div>\n                </div>\n            </div>\n        );\n    }\n}\n\nProjectItem.propTypes = {\n    deleteProject: PropTypes.func.isRequired\n};\n\nexport default connect(null, {deleteProject})(ProjectItem);","import React from 'react';\nimport {Link} from \"react-router-dom\";\n\nconst CreateProjectButton = () => {\n    return (\n        <React.Fragment>\n            <Link to=\"/addProject\" className=\"btn btn-lg btn-info\">\n                Create a Project\n            </Link>\n        </React.Fragment>\n    );\n};\n\nexport default CreateProjectButton;\n","import React, {Component} from 'react';\nimport ProjectItem from \"./Project/ProjectItem\";\nimport CreateProjectButton from \"./Project/CreateProjectButton\";\nimport {connect} from \"react-redux\";\nimport {getProjects} from \"../actions/projectActions\";\nimport PropTypes from \"prop-types\";\n\nclass Dashboard extends Component {\n    componentDidMount() {\n        this.props.getProjects();\n    }\n\n    render() {\n        const {projects} = this.props.project;\n        return (\n            <div className=\"projects\">\n                <div className=\"container\">\n                    <div className=\"row\">\n                        <div className=\"col-md-12\">\n                            <h1 className=\"display-4 text-center\">Projects</h1>\n                            <br/>\n                            <CreateProjectButton/>\n                            <br/>\n                            <hr/>\n                            {projects.map(project => (\n                                <ProjectItem key={project.id} project={project}/>\n                            ))}\n                        </div>\n                    </div>\n                </div>\n            </div>\n        );\n    }\n}\n\nDashboard.protoTypes = {\n    project: PropTypes.object.isRequired,\n    getProjects: PropTypes.func.isRequired\n};\n\nconst mapStateToProps = state => ({\n    project: state.project\n});\n\nexport default connect(mapStateToProps, {getProjects})(Dashboard);","import axios from \"axios\";\n\nconst setJWTToken = token => {\n    if (token) {\n        axios.defaults.headers.common[\"Authorization\"] = token;\n    } else {\n        delete axios.defaults.headers.common[\"Authorization\"];\n    }\n};\n\nexport default setJWTToken;","import axios from \"axios\";\nimport {GET_ERRORS, SET_CURRENT_USER} from \"./types\";\nimport setJWTToken from \"../securityUtils/setJWTToken\";\nimport jwt_decode from \"jwt-decode\";\n\nexport const createNewUser = (newUser, history) => async dispatch => {\n    try {\n        await axios.post(\"/api/users/register\", newUser);\n        history.push(\"/login\");\n        dispatch({\n            type: GET_ERRORS,\n            payload: {}\n        })\n    } catch (e) {\n        dispatch({\n            type: GET_ERRORS,\n            payload: e.response.data\n        })\n\n    }\n};\n\nexport const login = LoginRequest => async dispatch => {\n    try {\n        const res = await axios.post(\"/api/users/login\", LoginRequest);\n        const {token} = res.data;\n        localStorage.setItem(\"jwtToken\", token);\n        setJWTToken(token);\n        const decoded = jwt_decode(token);\n        dispatch({\n            type: SET_CURRENT_USER,\n            payload: decoded\n        })\n    } catch (e) {\n        dispatch({\n            type: GET_ERRORS,\n            payload: e.response.data\n        })\n    }\n};\n\nexport const logout = () => dispatch => {\n    localStorage.removeItem(\"jwtToken\");\n    setJWTToken(false);\n    dispatch({\n        type: SET_CURRENT_USER,\n        payload: {}\n    })\n};","import React, {Component} from 'react';\nimport {Link} from \"react-router-dom\";\nimport PropTypes from \"prop-types\";\nimport {connect} from \"react-redux\";\nimport {logout} from \"../../actions/securityActions\";\n\nclass Header extends Component {\n    logout() {\n        this.props.logout();\n        window.location.href = \"/\";\n    }\n\n    render() {\n        const {validToken, user} = this.props.security;\n\n        const userIsAuthenticated = (\n            <div className=\"collapse navbar-collapse\" id=\"mobile-nav\">\n                <ul className=\"navbar-nav mr-auto\">\n                    <li className=\"nav-item\">\n                        <Link className=\"nav-link\" to=\"/dashboard\">\n                            Dashboard\n                        </Link>\n                    </li>\n                </ul>\n\n                <ul className=\"navbar-nav ml-auto\">\n                    <li className=\"nav-item\">\n                        <Link className=\"nav-link \" to=\"/dashboard\">\n                            <i className=\"fas fa-user-circle mr-1\"/>{user.fullName}\n                        </Link>\n                    </li>\n                    <li className=\"nav-item\">\n                        <Link className=\"nav-link\" to=\"/logout\" onClick={this.logout.bind(this)}>\n                            Logout\n                        </Link>\n                    </li>\n                </ul>\n            </div>\n        );\n\n        const userIsNotAuthenticated = (\n            <div className=\"collapse navbar-collapse\" id=\"mobile-nav\">\n\n                <ul className=\"navbar-nav ml-auto\">\n                    <li className=\"nav-item\">\n                        <Link className=\"nav-link \" to=\"/register\">\n                            Sign Up\n                        </Link>\n                    </li>\n                    <li className=\"nav-item\">\n                        <Link className=\"nav-link\" to=\"/login\">\n                            Login\n                        </Link>\n                    </li>\n                </ul>\n            </div>\n        );\n\n        let headerLinks;\n        if (validToken && user) {\n            headerLinks = userIsAuthenticated;\n        } else {\n            headerLinks = userIsNotAuthenticated;\n        }\n\n        return (\n            <nav className=\"navbar navbar-expand-sm navbar-dark bg-primary mb-4\">\n                <div className=\"container\">\n                    <Link className=\"navbar-brand\" to=\"/\">\n                        Personal Project Management App\n                    </Link>\n                    <button className=\"navbar-toggler\" type=\"button\" data-toggle=\"collapse\" data-target=\"#mobile-nav\">\n                        <span className=\"navbar-toggler-icon\"/>\n                    </button>\n                    {headerLinks}\n                </div>\n            </nav>\n        );\n    }\n}\n\nHeader.propTypes = {\n    logout: PropTypes.func.isRequired,\n    security: PropTypes.object.isRequired\n};\n\nconst mapStateToProps = state => ({\n    security: state.security\n});\n\nexport default connect(mapStateToProps, {logout})(Header);","import React, {Component} from 'react';\nimport PropTypes from \"prop-types\";\nimport {connect} from \"react-redux\";\nimport {createProject} from \"../../actions/projectActions\";\nimport classnames from \"classnames\";\n\nclass AddProject extends Component {\n    constructor() {\n        super(undefined);\n\n        this.state = {\n            projectName: \"\",\n            projectIdentifier: \"\",\n            description: \"\",\n            start_date: \"\",\n            end_date: \"\",\n            errors: {}\n        };\n\n        this.onChange = this.onChange.bind(this);\n        this.onSubmit = this.onSubmit.bind(this);\n    }\n\n    componentWillReceiveProps(nextProps, nextContext) {\n        if (nextProps.errors) {\n            this.setState({errors: nextProps.errors})\n        }\n    }\n\n    onChange(e) {\n        this.setState({[e.target.name]: e.target.value});\n    }\n\n    onSubmit(e) {\n        e.preventDefault();\n        const newProject = {\n            projectName: this.state.projectName,\n            projectIdentifier: this.state.projectIdentifier,\n            description: this.state.description,\n            start_date: this.state.start_date,\n            end_date: this.state.end_date\n        };\n\n        this.props.createProject(newProject, this.props.history)\n    }\n\n    render() {\n        const {errors} = this.state;\n\n        return (\n            <div>\n                <div className=\"project\">\n                    <div className=\"container\">\n                        <div className=\"row\">\n                            <div className=\"col-md-8 m-auto\">\n                                <h5 className=\"display-4 text-center\">Create Project form</h5>\n                                <hr/>\n                                <form onSubmit={this.onSubmit}>\n                                    <div className=\"form-group\">\n                                        <input\n                                            type=\"text\"\n                                            className={classnames(\"form-control form-control-lg \", {\n                                                \"is-invalid\": errors.projectName\n                                            })}\n                                            placeholder=\"Project Name\"\n                                            name=\"projectName\"\n                                            value={this.state.projectName}\n                                            onChange={this.onChange}\n                                        />\n                                        {errors.projectName && (\n                                            <div className=\"invalid-feedback\">{errors.projectName}</div>\n                                        )}\n                                    </div>\n                                    <div className=\"form-group\">\n                                        <input\n                                            type=\"text\"\n                                            className={classnames(\"form-control form-control-lg\", {\n                                                \"is-invalid\": errors.projectIdentifier\n                                            })}\n                                            placeholder=\"Unique Project ID\"\n                                            name=\"projectIdentifier\"\n                                            value={this.state.projectIdentifier}\n                                            onChange={this.onChange}\n                                        />\n                                        {errors.projectIdentifier && (\n                                            <div className=\"invalid-feedback\">{errors.projectIdentifier}</div>\n                                        )}\n                                    </div>\n                                    <div className=\"form-group\">\n                                        <textarea\n                                            className={classnames(\"form-control form-control-lg\", {\n                                                \"is-invalid\": errors.description\n                                            })}\n                                            placeholder=\"Project Description\"\n                                            name=\"description\"\n                                            value={this.state.description}\n                                            onChange={this.onChange}\n                                        />\n                                        {errors.description && (\n                                            <div className=\"invalid-feedback\">{errors.description}</div>\n                                        )}\n                                    </div>\n                                    <h6>Start Date</h6>\n                                    <div className=\"form-group\">\n                                        <input\n                                            type=\"date\"\n                                            className=\"form-control form-control-lg\"\n                                            name=\"start_date\"\n                                            value={this.state.start_date}\n                                            onChange={this.onChange}\n                                        />\n                                    </div>\n                                    <h6>Estimated End Date</h6>\n                                    <div className=\"form-group\">\n                                        <input\n                                            type=\"date\"\n                                            className=\"form-control form-control-lg\"\n                                            name=\"end_date\"\n                                            value={this.state.end_date}\n                                            onChange={this.onChange}\n                                        />\n                                    </div>\n\n                                    <input\n                                        type=\"submit\"\n                                        className=\"btn btn-primary btn-block mt-4\"\n                                    />\n                                </form>\n                            </div>\n                        </div>\n                    </div>\n                </div>\n            </div>\n        );\n    }\n}\n\nAddProject.propType = {\n    createProject: PropTypes.func.isRequired,\n    errors: PropTypes.object.isRequired\n};\n\nconst mapStateToProps = state => ({\n    errors: state.errors\n});\n\nexport default connect(mapStateToProps, {createProject})(AddProject);","import {GET_ERRORS} from \"../actions/types\";\n\nconst initialState = {};\n\nexport default function (state = initialState, action) {\n    switch (action.type) {\n        case GET_ERRORS:\n            return action.payload;\n        default:\n            return state;\n    }\n}","import {DELETE_PROJECT, GET_PROJECT, GET_PROJECTS} from \"../actions/types\";\n\nconst initialState = {\n    projects: [],\n    project: {}\n};\n\nexport default function (state = initialState, action) {\n    switch (action.type) {\n        case GET_PROJECTS:\n            return {\n                ...state,\n                projects: action.payload\n            };\n        case GET_PROJECT:\n            return {\n                ...state,\n                project: action.payload\n            };\n        case DELETE_PROJECT:\n            return {\n                ...state,\n                projects: state.projects.filter(project => project.projectIdentifier !== action.payload)\n            };\n        default:\n            return state\n\n    }\n}","import {GET_BACKLOG, DELETE_PROJECT_TASK, GET_PROJECT_TASK} from \"../actions/types\";\n\nconst initialState = {\n    project_tasks: [],\n    project_task: {}\n};\n\nexport default function (state = initialState, action) {\n    switch (action.type) {\n        case GET_BACKLOG:\n            return {\n                ...state,\n                project_tasks: action.payload\n            };\n        case GET_PROJECT_TASK:\n            return {\n                ...state,\n                project_task: action.payload\n            };\n        case DELETE_PROJECT_TASK:\n            return {\n                ...state,\n                project_tasks: state.project_tasks.filter(\n                    project_task => project_task.projectSequence !== action.payload)\n            };\n        default:\n            return state\n    }\n}","import {SET_CURRENT_USER} from \"../actions/types\";\n\nconst initialState = {\n    user: {},\n    validToken: false,\n};\n\nconst booleanActionPayload = (payload) => {\n    return !!payload;\n};\n\nexport default function (state = initialState, action) {\n    switch (action.type) {\n        case SET_CURRENT_USER:\n            return {\n                ...state,\n                validToken: booleanActionPayload(action.payload),\n                user: action.payload\n            };\n        default:\n            return state\n    }\n}","import {combineReducers} from \"redux\";\nimport errorReducer from \"./errorReducer\";\nimport projectReducer from \"./projectReducer\";\nimport backlogReducer from \"./backlogReducer\";\nimport securityReducer from \"./secutiryReducer\";\n\nexport default combineReducers({\n    errors: errorReducer,\n    project: projectReducer,\n    backlog: backlogReducer,\n    security: securityReducer\n})","import {createStore, applyMiddleware, compose} from \"redux\";\nimport thunk from \"redux-thunk\";\nimport rootReducer from \"./reducers\"\n\nconst initialState = {};\nconst middleware = [thunk];\n\nlet store;\n\nconst ReactReduxDevTools = window.__REDUX_DEVTOOLS_EXTENSION__ && window.__REDUX_DEVTOOLS_EXTENSION__();\n\nif (window.navigator.userAgent.includes(\"Chrome\") && ReactReduxDevTools) {\n    store = createStore(\n        rootReducer,\n        initialState,\n        compose(applyMiddleware(...middleware), ReactReduxDevTools))\n} else {\n    store = createStore(\n        rootReducer,\n        initialState,\n        compose(applyMiddleware(...middleware)))\n}\n\nexport default store;\n\n\n","import React, {Component} from 'react';\nimport PropTypes from \"prop-types\";\nimport {connect} from \"react-redux\";\nimport classnames from \"classnames\";\nimport {createProject, getProject} from \"../../actions/projectActions\";\n\nclass UpdateProject extends Component {\n    constructor() {\n        super();\n        this.state = {\n            id: \"\",\n            projectName: \"\",\n            projectIdentifier: \"\",\n            description: \"\",\n            start_date: \"\",\n            end_date: \"\",\n            errors: {}\n        };\n        this.onChange = this.onChange.bind(this);\n        this.onSubmit = this.onSubmit.bind(this);\n    }\n\n    componentWillReceiveProps(nextProps, nextContext) {\n        if (nextProps.errors) {\n            this.setState({errors: nextProps.errors})\n        }\n        const {\n            id,\n            projectName,\n            projectIdentifier,\n            description,\n            start_date,\n            end_date\n        } = nextProps.project;\n        this.setState({\n            id,\n            projectName,\n            projectIdentifier,\n            description,\n            start_date,\n            end_date\n        })\n    }\n\n    componentDidMount() {\n        const {id} = this.props.match.params;\n        this.props.getProject(id, this.props.history);\n    }\n\n    onChange(e) {\n        this.setState({[e.target.name]: e.target.value})\n    }\n\n    onSubmit(e) {\n        e.preventDefault();\n        const updateProject = {\n            id: this.state.id,\n            projectName: this.state.projectName,\n            projectIdentifier: this.state.projectIdentifier,\n            description: this.state.description,\n            start_date: this.state.start_date,\n            end_date: this.state.end_date\n        };\n\n        this.props.createProject(updateProject, this.props.history)\n    }\n\n    render() {\n        const {errors} = this.state;\n        return (\n            <div className=\"project\">\n                <div className=\"container\">\n                    <div className=\"row\">\n                        <div className=\"col-md-8 m-auto\">\n                            <h5 className=\"display-4 text-center\">Update Project form</h5>\n                            <hr/>\n                            <form onSubmit={this.onSubmit}>\n                                <div className=\"form-group\">\n                                    <input\n                                        type=\"text\"\n                                        className={classnames(\"form-control form-control-lg\", {\n                                            \"is-invalid\": errors.projectName\n                                        })}\n                                        placeholder=\"Project Name\"\n                                        name=\"projectName\"\n                                        value={this.state.projectName}\n                                        onChange={this.onChange}\n                                    />\n                                    {\n                                        errors.projectName && (\n                                            <div className=\"invalid-feedback\">{errors.projectName}</div>\n                                        )\n                                    }\n                                </div>\n                                <div className=\"form-group\">\n                                    <input\n                                        type=\"text\"\n                                        className={classnames(\"form-control form-control-lg\", {\n                                            \"is-invalid\": errors.projectIdentifier\n                                        })}\n                                        placeholder=\"Unique Project ID\"\n                                        name=\"projectIdentifier\"\n                                        value={this.state.projectIdentifier}\n                                        disabled\n                                    />\n                                </div>\n                                <div className=\"form-group\">\n                                    <textarea\n                                        className={classnames(\"form-control form-control-lg\", {\n                                            \"is-invalid\": errors.description\n                                        })}\n                                        placeholder=\"Project Description\"\n                                        name=\"description\"\n                                        value={this.state.description}\n                                        onChange={this.onChange}\n                                    />\n                                    {\n                                        errors.description && (\n                                            <div className=\"invalid-feedback\">{errors.description}</div>\n                                        )\n                                    }\n                                </div>\n                                <h6>Start Date</h6>\n                                <div className=\"form-group\">\n                                    <input\n                                        type=\"date\"\n                                        className={classnames(\"form-control form-control-lg\", {\n                                            \"is-invalid\": errors.start_date\n                                        })}\n                                        name=\"start_date\"\n                                        value={this.state.start_date}\n                                        onChange={this.onChange}\n                                    />\n                                </div>\n                                <h6>Estimated End Date</h6>\n                                <div className=\"form-group\">\n                                    <input\n                                        type=\"date\"\n                                        className={classnames(\"form-control form-control-lg\", {\n                                            \"is-invalid\": errors.end_date\n                                        })}\n                                        name=\"end_date\"\n                                        value={this.state.end_date}\n                                        onChange={this.onChange}\n                                    />\n                                </div>\n                                <input\n                                    type=\"submit\"\n                                    className=\"btn btn-primary btn-block mt-4\"\n                                />\n                            </form>\n                        </div>\n                    </div>\n                </div>\n            </div>\n        );\n    }\n}\n\nUpdateProject.propTypes = {\n    getProject: PropTypes.func.isRequired,\n    createProject: PropTypes.func.isRequired,\n    project: PropTypes.object.isRequired,\n    errors: PropTypes.object.isRequired\n};\n\nconst mapStateToProps = state => ({\n    project: state.project.project,\n    errors: state.errors\n});\n\nexport default connect(mapStateToProps, {getProject, createProject})(UpdateProject);","import React, {Component} from 'react';\nimport {Link} from \"react-router-dom\";\nimport PropTypes from \"prop-types\";\nimport {connect} from \"react-redux\";\nimport {deleteProjectTask} from \"../../../actions/backlogActions\";\n\nclass ProjectTask extends Component {\n\n    onDeleteClick(backlog_id, pt_id) {\n        this.props.deleteProjectTask(backlog_id, pt_id);\n    }\n\n    render() {\n        const {project_task} = this.props;\n\n        let priorityString;\n        let priorityClass;\n\n        if (project_task.priority === 1) {\n            priorityClass = \"bg-danger text-light\";\n            priorityString = \"HIGH\";\n        }\n        if (project_task.priority === 2) {\n            priorityClass = \"bg-warning text-light\";\n            priorityString = \"MEDIUM\";\n        }\n        if (project_task.priority === 3) {\n            priorityClass = \"bg-info text-light\";\n            priorityString = \"LOW\";\n        }\n        return (\n            <div className=\"card mb-1 bg-light\">\n                <div className={`card-header text-primary ${priorityClass}`}>\n                    ID: {project_task.projectSequence} -- Priority:{priorityString}\n                </div>\n                <div className=\"card-body bg-light\">\n                    <h5 className=\"card-title\">{project_task.summary}</h5>\n                    <p className=\"card-text text-truncate \">\n                        {project_task.acceptanceCriteria}\n                    </p>\n                    <Link to={`/updateProjectTask/${project_task.projectIdentifier}/${project_task.projectSequence}`}\n                          className=\"btn btn-primary\">\n                        View / Update\n                    </Link>\n                    <button className=\"btn btn-danger ml-4\"\n                            onClick={this.onDeleteClick.bind(this, project_task.projectIdentifier, project_task.projectSequence)}\n                    >\n                        Delete\n                    </button>\n                </div>\n            </div>\n        );\n    }\n}\n\nProjectTask.propTypes = {\n    deleteProjectTask: PropTypes.func.isRequired\n};\n\nexport default connect(null, {deleteProjectTask})(ProjectTask);","import axios from \"axios\";\nimport {GET_ERRORS, GET_BACKLOG, GET_PROJECT_TASK, DELETE_PROJECT_TASK} from \"./types\";\n\nexport const addProjectTask = (backlog_id, project_task, history) => async dispatch => {\n\n    try {\n        await axios.post(`/api/backlog/${backlog_id}`, project_task);\n        history.push(`/projectBoard/${backlog_id}`);\n        dispatch({\n            type: GET_ERRORS,\n            payload: {}\n        })\n    } catch (e) {\n        dispatch({\n            type: GET_ERRORS,\n            payload: e.response.data\n        })\n    }\n};\n\nexport const getBacklog = backlog_id => async dispatch => {\n    try {\n        const res = await axios.get(`/api/backlog/${backlog_id}`);\n        dispatch({\n            type: GET_BACKLOG,\n            payload: res.data\n        })\n    } catch (e) {\n        dispatch({\n            type: GET_ERRORS,\n            payload: e.response.data\n        })\n    }\n};\n\nexport const getProjectTask = (backlog_id, pt_id, history) => async dispatch => {\n    try {\n        const res = await axios.get(`/api/backlog/${backlog_id}/${pt_id}`);\n        dispatch({\n            type: GET_PROJECT_TASK,\n            payload: res.data\n        })\n    } catch (e) {\n        history.push(\"/dashboard\");\n    }\n};\n\nexport const updateProjectTask = (backlog_id, pt_id, project_task, history) => async dispatch => {\n    try {\n        await axios.patch(`/api/backlog/${backlog_id}/${pt_id}`, project_task);\n        history.push(`/projectBoard/${backlog_id}`);\n        dispatch({\n            type: GET_ERRORS,\n            payload: {}\n        })\n    } catch (e) {\n        dispatch({\n            type: GET_ERRORS,\n            payload: e.response.data\n        })\n    }\n};\n\nexport const deleteProjectTask = (backlog_id, pt_id) => async dispatch => {\n    if (window.confirm(`You are deleting project task ${pt_id}, the action can't be undone`)) {\n        await axios.delete(`/api/backlog/${backlog_id}/${pt_id}`);\n        dispatch({\n            type: DELETE_PROJECT_TASK,\n            payload: pt_id\n        });\n    }\n};\n","import React, {Component} from 'react';\nimport ProjectTask from \"./ProjectTask/ProjectTask\";\n\nclass Backlog extends Component {\n    render() {\n        const {project_tasks_prop} = this.props;\n\n        const tasks = project_tasks_prop.map(project_task => (\n            <ProjectTask key={project_task.id} project_task={project_task}/>\n        ));\n\n        let todoItems = [];\n        let inProgressItems = [];\n        let doneItems = [];\n\n        for (let i = 0; i < tasks.length; i++) {\n            if (tasks[i].props.project_task.status === \"TO_DO\")\n                todoItems.push(tasks[i]);\n            if (tasks[i].props.project_task.status === \"IN_PROGRESS\")\n                inProgressItems.push(tasks[i]);\n            if (tasks[i].props.project_task.status === \"DONE\")\n                doneItems.push(tasks[i]);\n        }\n        return (\n            <div className=\"container\">\n                <div className=\"row\">\n                    <div className=\"col-md-4\">\n                        <div className=\"card text-center mb-2\">\n                            <div className=\"card-header bg-secondary text-white\">\n                                <h3>TO DO</h3>\n                            </div>\n                        </div>\n                        {todoItems}\n                    </div>\n                    <div className=\"col-md-4\">\n                        <div className=\"card text-center mb-2\">\n                            <div className=\"card-header bg-primary text-white\">\n                                <h3>In Progress</h3>\n                            </div>\n                        </div>\n                        {inProgressItems}\n                    </div>\n                    <div className=\"col-md-4\">\n                        <div className=\"card text-center mb-2\">\n                            <div className=\"card-header bg-success text-white\">\n                                <h3>Done</h3>\n                            </div>\n                        </div>\n                        {doneItems}\n                    </div>\n                </div>\n            </div>\n        );\n    }\n}\n\nexport default Backlog;","import React, {Component} from 'react';\nimport {Link} from \"react-router-dom\";\nimport Backlog from \"./Backlog\";\nimport {connect} from \"react-redux\";\nimport PropTypes from \"prop-types\";\nimport {getBacklog} from \"../../actions/backlogActions\";\n\nclass ProjectBoard extends Component {\n\n    constructor() {\n        super();\n        this.state = {\n            errors: {}\n        }\n    }\n\n    componentWillReceiveProps(nextProps) {\n        if (nextProps.errors) {\n            this.setState({\n                errors: nextProps.errors\n            })\n        }\n    }\n\n    componentDidMount() {\n        const {id} = this.props.match.params;\n        this.props.getBacklog(id)\n    }\n\n    render() {\n        const {id} = this.props.match.params;\n        const {project_tasks} = this.props.backlog;\n        const {errors} = this.state;\n\n        let boardContent;\n\n        const boardAlgorithm = (errors, project_tasks) => {\n            if (project_tasks.length < 1) {\n                if (errors.projectNotFound) {\n                    return (\n                        <div className=\"alert alert-danger text-center\" role=\"alert\">\n                            {errors.projectNotFound}\n                        </div>\n                    )\n                } else if (errors.projectIdentifier) {\n                    return (\n                        <div className=\"alert alert-danger text-center\" role=\"alert\">\n                            {errors.projectIdentifier}\n                        </div>\n                    )\n                } else {\n                    return (\n                        <div className=\"alert alert-info text-center\" role=\"alert\">\n                            No Project Tasks on this board\n                        </div>\n                    )\n                }\n            } else {\n                return <Backlog project_tasks_prop={project_tasks}/>\n            }\n        };\n\n        boardContent = boardAlgorithm(errors, project_tasks);\n\n        return (\n            <div className=\"container\">\n                <Link to={`/addProjectTask/${id}`} className=\"btn btn-primary mb-3\">\n                    <i className=\"fas fa-plus-circle\"> Create Project Task</i>\n                </Link>\n                <br/>\n                <hr/>\n                {boardContent}\n            </div>\n        );\n    }\n}\n\nProjectBoard.propTypes = {\n    backlog: PropTypes.object.isRequired,\n    getBacklog: PropTypes.func.isRequired,\n    errors: PropTypes.object.isRequired\n};\n\nconst mapStateToProps = state => ({\n    backlog: state.backlog,\n    errors: state.errors\n});\n\nexport default connect(mapStateToProps, {getBacklog})(ProjectBoard);","import React, {Component} from 'react';\nimport {Link} from \"react-router-dom\";\nimport {connect} from \"react-redux\";\nimport classnames from \"classnames\";\nimport {addProjectTask} from \"../../../actions/backlogActions\";\nimport PropTypes from \"prop-types\";\n\nclass AddProjectTask extends Component {\n\n    constructor(props) {\n        super(props);\n        const {id} = this.props.match.params;\n\n        this.state = {\n            \"summary\": \"\",\n            \"acceptanceCriteria\": \"\",\n            \"status\": \"\",\n            \"priority\": \"\",\n            \"dueDate\": \"\",\n            \"projectIdentifier\": id,\n            errors: {}\n        };\n        this.onChange = this.onChange.bind(this);\n        this.onSubmit = this.onSubmit.bind(this);\n    }\n\n    componentWillReceiveProps(nextProps, nextContext) {\n        if (nextProps.errors) {\n            this.setState({errors: nextProps.errors})\n        }\n    }\n\n    onChange(e) {\n        this.setState({\n            [e.target.name]: e.target.value\n        })\n    }\n\n    onSubmit(e) {\n        e.preventDefault();\n\n        const newTask = {\n            \"summary\": this.state.summary,\n            \"acceptanceCriteria\": this.state.acceptanceCriteria,\n            \"status\": this.state.status,\n            \"priority\": this.state.priority,\n            \"dueDate\": this.state.dueDate\n        };\n        this.props.addProjectTask(this.state.projectIdentifier, newTask, this.props.history)\n    }\n\n    render() {\n        const {id} = this.props.match.params;\n        const {errors} = this.state;\n        return (\n            <div className=\"add-PBI\">\n                <div className=\"container\">\n                    <div className=\"row\">\n                        <div className=\"col-md-8 m-auto\">\n                            <Link to={`/projectBoard/${id}`} className=\"btn btn-light\">\n                                Back to Project Board\n                            </Link>\n                            <h4 className=\"display-4 text-center\">\n                                Add Project Task\n                            </h4>\n                            <p className=\"lead text-center\">Project Name + Project Code</p>\n                            <form onSubmit={this.onSubmit}>\n                                <div className=\"form-group\">\n                                    <input type=\"text\"\n                                           className={classnames(\"form-control form-control-lg\", {\n                                               \"is-invalid\": errors.summary\n                                           })}\n                                           name=\"summary\"\n                                           placeholder=\"Project Task summary\"\n                                           value={this.state.summary}\n                                           onChange={this.onChange}\n                                    />\n                                    {\n                                        errors.summary && (\n                                            <div className=\"invalid-feedback\">{errors.summary}</div>\n                                        )\n                                    }\n                                </div>\n                                <div className=\"form-group\">\n                                    <textarea className=\"form-control form-control-lg\"\n                                              placeholder=\"Acceptance Criteria\"\n                                              name=\"acceptanceCriteria\"\n                                              value={this.state.acceptanceCriteria}\n                                              onChange={this.onChange}\n                                    />\n                                </div>\n                                <h6>Due Date</h6>\n                                <div className=\"form-group\">\n                                    <input type=\"date\"\n                                           className=\"form-control form-control-lg\"\n                                           name=\"dueDate\"\n                                           value={this.state.dueDate}\n                                           onChange={this.onChange}\n                                    />\n                                </div>\n                                <div className=\"form-group\">\n                                    <select className=\"form-control form-control-lg\"\n                                            name=\"priority\"\n                                            value={this.state.priority}\n                                            onChange={this.onChange}\n                                    >\n                                        <option value={0}>Select Priority</option>\n                                        <option value={1}>High</option>\n                                        <option value={2}>Medium</option>\n                                        <option value={3}>Low</option>\n                                    </select>\n                                </div>\n\n                                <div className=\"form-group\">\n                                    <select className=\"form-control form-control-lg\"\n                                            name=\"status\"\n                                            value={this.state.status}\n                                            onChange={this.onChange}\n                                    >\n                                        <option value=\"\">Select Status</option>\n                                        <option value=\"TO_DO\">TO DO</option>\n                                        <option value=\"IN_PROGRESS\">IN PROGRESS</option>\n                                        <option value=\"DONE\">DONE</option>\n                                    </select>\n                                </div>\n\n                                <input type=\"submit\" className=\"btn btn-primary btn-block mt-4\"/>\n                            </form>\n                        </div>\n                    </div>\n                </div>\n            </div>\n        );\n    }\n}\n\nAddProjectTask.propTypes = {\n    addProjectTask: PropTypes.func.isRequired,\n    errors: PropTypes.object.isRequired\n};\n\nconst mapStateToProps = state => ({\n    errors: state.errors\n});\n\nexport default connect(mapStateToProps, {addProjectTask})(AddProjectTask);","import React, {Component} from 'react';\nimport {connect} from \"react-redux\";\nimport classnames from \"classnames\";\nimport {getProjectTask, updateProjectTask} from \"../../../actions/backlogActions\";\nimport PropTypes from \"prop-types\";\nimport {Link} from \"react-router-dom\";\n\nclass UpdateProjectTask extends Component {\n\n    constructor(props) {\n        super(props);\n        this.state = {\n            id: \"\",\n            projectSequence: \"\",\n            summary: \"\",\n            acceptanceCriteria: \"\",\n            status: \"\",\n            priority: \"\",\n            dueDate: null,\n            projectIdentifier: \"\",\n            create_At: \"\",\n            errors: {}\n        };\n        this.onChange = this.onChange.bind(this);\n        this.onSubmit = this.onSubmit.bind(this);\n    }\n\n    componentDidMount() {\n        const {backlog_id, pt_id} = this.props.match.params;\n        this.props.getProjectTask(backlog_id, pt_id, this.props.history);\n    }\n\n    componentWillReceiveProps(nextProps, nextContext) {\n\n        if (nextProps.errors) {\n            this.setState({errors: nextProps.errors});\n            console.log(\"ERRORS \" + this.state.errors)\n        }\n\n        const {\n            id,\n            projectSequence,\n            summary,\n            acceptanceCriteria,\n            status,\n            priority,\n            dueDate,\n            projectIdentifier,\n            create_At\n        } = nextProps.project_task;\n        this.setState({\n            id,\n            projectSequence,\n            summary,\n            acceptanceCriteria,\n            status,\n            priority,\n            dueDate,\n            projectIdentifier,\n            create_At\n        })\n    }\n\n    onChange(e) {\n        this.setState({[e.target.name]: e.target.value})\n    }\n\n    onSubmit(e) {\n        e.preventDefault();\n        const updateProjectTask = {\n            id: this.state.id,\n            projectSequence: this.state.projectSequence,\n            summary: this.state.summary,\n            acceptanceCriteria: this.state.acceptanceCriteria,\n            status: this.state.status,\n            priority: this.state.priority,\n            dueDate: this.state.dueDate,\n            projectIdentifier: this.state.projectIdentifier,\n            create_At: this.state.create_At\n        };\n        this.props.updateProjectTask(\n            this.state.projectIdentifier,\n            this.state.projectSequence,\n            updateProjectTask,\n            this.props.history);\n    }\n\n    render() {\n        const {errors} = this.state;\n        return (\n            <div className=\"add-PBI\">\n                <div className=\"container\">\n                    <div className=\"row\">\n                        <div className=\"col-md-8 m-auto\">\n                            <Link\n                                to={`/projectBoard/${this.state.projectIdentifier}`}\n                                className=\"btn btn-light\"\n                            >\n                                Back to Project Board\n                            </Link>\n                            <h4 className=\"display-4 text-center\">Update Project Task</h4>\n                            <p className=\"lead text-center\">\n                                Project Name: {this.state.projectIdentifier} |\n                                Project Task ID:{\" \"} {this.state.projectSequence}\n                            </p>\n                            <form onSubmit={this.onSubmit}>\n                                <div className=\"form-group\">\n                                    <input type=\"text\"\n                                           className={classnames(\"form-control form-control-lg\",\n                                               {\"is-invalid\": errors.summary})}\n                                           name=\"summary\"\n                                           placeholder=\"Project Task summary\"\n                                           value={this.state.summary}\n                                           onChange={this.onChange}\n                                    />\n                                    {\n                                        errors && (\n                                            <div className=\"invalid-feedback\">{errors.summary}</div>\n                                        )\n                                    }\n                                </div>\n                                <div className=\"form-group\">\n                                    <textarea className=\"form-control form-control-lg\"\n                                              placeholder=\"Acceptance Criteria\"\n                                              name=\"acceptanceCriteria\"\n                                              value={this.state.acceptanceCriteria}\n                                              onChange={this.onChange}\n                                    />\n                                </div>\n                                <h6>Due Date</h6>\n                                <div className=\"form-group\">\n                                    <input type=\"date\"\n                                           className=\"form-control form-control-lg\"\n                                           name=\"dueDate\"\n                                           value={this.state.dueDate}\n                                           onChange={this.onChange}\n                                    />\n                                </div>\n                                <div className=\"form-group\">\n                                    <select className=\"form-control form-control-lg\"\n                                            name=\"priority\"\n                                            value={this.state.priority}\n                                            onChange={this.onChange}\n                                    >\n                                        <option value={0}>Select Priority</option>\n                                        <option value={1}>High</option>\n                                        <option value={2}>Medium</option>\n                                        <option value={3}>Low</option>\n                                    </select>\n                                </div>\n\n                                <div className=\"form-group\">\n                                    <select className=\"form-control form-control-lg\"\n                                            name=\"status\"\n                                            value={this.state.status}\n                                            onChange={this.onChange}\n                                    >\n                                        <option value=\"\">Select Status</option>\n                                        <option value=\"TO_DO\">TO DO</option>\n                                        <option value=\"IN_PROGRESS\">IN PROGRESS</option>\n                                        <option value=\"DONE\">DONE</option>\n                                    </select>\n                                </div>\n                                <input type=\"submit\" className=\"btn btn-primary btn-block mt-4\"/>\n                            </form>\n                        </div>\n                    </div>\n                </div>\n            </div>\n        );\n    }\n}\n\nUpdateProjectTask.propTypes = {\n    getProjectTask: PropTypes.func.isRequired,\n    project_task: PropTypes.object.isRequired,\n    updateProjectTask: PropTypes.func.isRequired,\n    errors: PropTypes.object.isRequired\n};\n\nconst mapStateToProps = state => ({\n    project_task: state.backlog.project_task,\n    errors: state.errors\n});\n\nexport default connect(mapStateToProps, {getProjectTask, updateProjectTask})(UpdateProjectTask);","import React, {Component} from 'react';\nimport {Link} from \"react-router-dom\";\nimport {connect} from \"react-redux\";\nimport PropTypes from \"prop-types\";\n\nclass Landing extends Component {\n\n    componentDidMount() {\n        if (this.props.security.validToken) {\n            this.props.history.push(\"/dashboard\");\n        }\n    }\n\n    render() {\n        return (\n            <div className=\"landing\">\n                <div className=\"light-overlay landing-inner text-dark\">\n                    <div className=\"container\">\n                        <div className=\"row\">\n                            <div className=\"col-md-12 text-center\">\n                                <h1 className=\"display-3 mb-4\">Project Management App</h1>\n                                <p className=\"lead\">\n                                    Create your account to join active projects or start you own\n                                </p>\n                                <hr/>\n                                <Link to=\"/register\" className=\"btn btn-lg btn-primary mr-2\">\n                                    Sign Up\n                                </Link>\n                                <Link to=\"/login\" className=\"btn btn-lg btn-secondary mr-2\">\n                                    Login\n                                </Link>\n                            </div>\n                        </div>\n                    </div>\n                </div>\n            </div>\n        );\n    }\n}\n\nLanding.propTypes = {\n    security: PropTypes.object.isRequired\n};\n\nconst mapStateToProps = state => ({\n    security: state.security\n});\n\nexport default connect(mapStateToProps)(Landing);","import React, {Component} from 'react';\nimport PropTypes from \"prop-types\";\nimport {connect} from \"react-redux\";\nimport {createNewUser} from \"../../actions/securityActions\";\nimport * as classnames from \"classnames\";\n\nclass Register extends Component {\n\n    constructor() {\n        super();\n        this.state = {\n            \"username\": \"\",\n            \"fullName\": \"\",\n            \"password\": \"\",\n            \"confirmPassword\": \"\",\n            errors: {}\n        };\n        this.onChange = this.onChange.bind(this);\n        this.onSubmit = this.onSubmit.bind(this);\n    }\n\n    componentDidMount() {\n        if (this.props.security.validToken) {\n            this.props.history.push(\"/dashboard\");\n        }\n    }\n\n    componentWillReceiveProps(nextProps, nextContext) {\n        if (nextProps.errors) {\n            this.setState({errors: nextProps.errors})\n        }\n    }\n\n    onSubmit(e) {\n        e.preventDefault();\n        const newUser = {\n            \"username\": this.state.username,\n            \"fullName\": this.state.fullName,\n            \"password\": this.state.password,\n            \"confirmPassword\": this.state.confirmPassword\n        };\n        this.props.createNewUser(newUser, this.props.history)\n    }\n\n    onChange(e) {\n        this.setState({[e.target.name]: e.target.value})\n    }\n\n    render() {\n        const {errors} = this.state;\n        return (\n            <div className=\"register\">\n                <div className=\"container\">\n                    <div className=\"row\">\n                        <div className=\"col-md-8 m-auto\">\n                            <h1 className=\"display-4 text-center\">Sign Up</h1>\n                            <p className=\"lead text-center\">Create your Account</p>\n                            <form onSubmit={this.onSubmit}>\n                                <div className=\"form-group\">\n                                    <input type=\"text\"\n                                           className={classnames(\"form-control form-control-lg\", {\n                                               \"is-invalid\": errors.fullName\n                                           })}\n                                           placeholder=\"Full Name\"\n                                           name=\"fullName\"\n                                           value={this.state.fullName}\n                                           onChange={this.onChange}\n                                    />\n                                    {errors.fullName && (\n                                        <div className=\"invalid-feedback\">{errors.fullName}</div>\n                                    )}\n                                </div>\n                                <div className=\"form-group\">\n                                    <input type=\"email\" className={classnames(\"form-control form-control-lg\", {\n                                        \"is-invalid\": errors.username\n                                    })}\n                                           placeholder=\"Email Address ( User Name )\"\n                                           name=\"username\"\n                                           value={this.state.username}\n                                           onChange={this.onChange}\n                                    />\n                                    {errors.username && (\n                                        <div className=\"invalid-feedback\">{errors.username}</div>\n                                    )}\n                                </div>\n                                <div className=\"form-group\">\n                                    <input type=\"password\" className={classnames(\"form-control form-control-lg\", {\n                                        \"is-invalid\": errors.password\n                                    })}\n                                           placeholder=\"Password\"\n                                           name=\"password\"\n                                           value={this.state.password}\n                                           onChange={this.onChange}\n                                    />\n                                    {errors.password && (\n                                        <div className=\"invalid-feedback\">{errors.password}</div>\n                                    )}\n                                </div>\n                                <div className=\"form-group\">\n                                    <input type=\"password\" className={classnames(\"form-control form-control-lg\", {\n                                        \"is-invalid\": errors.confirmPassword\n                                    })}\n                                           placeholder=\"Confirm Password\"\n                                           name=\"confirmPassword\"\n                                           value={this.state.confirmPassword}\n                                           onChange={this.onChange}\n                                    />\n                                    {errors.confirmPassword && (\n                                        <div className=\"invalid-feedback\">{errors.confirmPassword}</div>\n                                    )}\n                                </div>\n                                <input type=\"submit\" className=\"btn btn-info btn-block mt-4\"/>\n                            </form>\n                        </div>\n                    </div>\n                </div>\n            </div>\n\n        );\n    }\n}\n\nRegister.propTypes = {\n    createNewUser: PropTypes.func.isRequired,\n    errors: PropTypes.object.isRequired,\n    security: PropTypes.object.isRequired\n};\n\nconst mapStateToProps = state => ({\n    errors: state.errors,\n    security: state.security\n});\n\nexport default connect(mapStateToProps, {createNewUser})(Register);","import React, {Component} from 'react';\nimport PropTypes from \"prop-types\";\nimport {connect} from \"react-redux\";\nimport classnames from \"classnames\";\nimport {login} from \"../../actions/securityActions\";\n\nclass Login extends Component {\n    constructor() {\n        super();\n        this.state = {\n            username: \"\",\n            password: \"\",\n            errors: {}\n        };\n        this.onChange = this.onChange.bind(this);\n        this.onSubmit = this.onSubmit.bind(this);\n    }\n\n    componentDidMount() {\n        if (this.props.security.validToken) {\n            this.props.history.push(\"/dashboard\");\n        }\n    }\n\n    componentWillReceiveProps(nextProps, nextContext) {\n        if (nextProps.security.validToken) {\n            this.props.history.push(\"/dashboard\");\n        }\n\n        if (nextProps.errors) {\n            this.setState({errors: nextProps.errors})\n        }\n\n    }\n\n    onSubmit(e) {\n        e.preventDefault();\n        const LoginRequest = {\n            username: this.state.username,\n            password: this.state.password\n        };\n        this.props.login(LoginRequest);\n    }\n\n    onChange(e) {\n        this.setState({[e.target.name]: e.target.value})\n    }\n\n    render() {\n        const {errors} = this.state;\n\n        return (\n            <div className=\"login\">\n                <div className=\"container\">\n                    <div className=\"row\">\n                        <div className=\"col-md-8 m-auto\">\n                            <h1 className=\"display-4 text-center\">Log In</h1>\n                            <form onSubmit={this.onSubmit}>\n                                <div className=\"form-group\">\n                                    <input type=\"text\" className={classnames(\"form-control form-control-lg\", {\n                                        \"is-invalid\": errors.username\n                                    })}\n                                           placeholder=\"Email Address (Username)\"\n                                           name=\"username\"\n                                           value={this.state.username}\n                                           onChange={this.onChange}\n                                    />\n                                    {errors.username && (\n                                        <div className=\"invalid-feedback\">{errors.username}</div>\n                                    )}\n                                </div>\n                                <div className=\"form-group\">\n                                    <input type=\"password\"\n                                           className={classnames(\"form-control form-control-lg\", {\n                                               \"is-invalid\": errors.username\n                                           })}\n                                           placeholder=\"Password\"\n                                           name=\"password\"\n                                           value={this.state.password}\n                                           onChange={this.onChange}\n                                    />\n                                    {errors.password && (\n                                        <div className=\"invalid-feedback\">{errors.password}</div>\n                                    )}\n                                </div>\n                                <input type=\"submit\" className=\"btn btn-info btn-block mt-4\"/>\n                            </form>\n                        </div>\n                    </div>\n                </div>\n            </div>\n        );\n    }\n}\n\nLogin.propTypes = {\n    login: PropTypes.func.isRequired,\n    errors: PropTypes.object.isRequired,\n    security: PropTypes.object.isRequired\n};\n\nconst mapStateToProps = state => ({\n    security: state.security,\n    errors: state.errors\n});\n\n\nexport default connect(mapStateToProps, {login})(Login);","import React from 'react';\nimport {Route, Redirect} from \"react-router-dom\";\nimport {connect} from \"react-redux\";\nimport PropTyped from \"prop-types\";\n\nconst SecureRoute = ({component: Component, security, ...otherProps}) => (\n    <Route {...otherProps}\n           render={\n               props => security.validToken === true ?\n                   (<Component {...props}/>) :\n                   (<Redirect to=\"/login\"/>)\n           }\n    />\n);\n\nSecureRoute.propTypes = {\n    security: PropTyped.object.isRequired\n};\n\nconst mapStateToProps = state => ({\n    security: state.security\n});\n\nexport default connect(mapStateToProps)(SecureRoute);","import React, {Component} from 'react';\nimport './App.css';\nimport Dashboard from \"./components/Dashboard\";\nimport Header from \"./components/Layout/Header\";\nimport \"bootstrap/dist/css/bootstrap.min.css\"\nimport {BrowserRouter as Router, Route, Switch} from \"react-router-dom\";\nimport AddProject from \"./components/Project/AddProject\";\nimport {Provider} from \"react-redux\";\nimport store from \"./store\";\nimport UpdateProject from \"./components/Project/UpdateProject\";\nimport ProjectBoard from \"./components/ProjectBoard/ProjectBoard\";\nimport AddProjectTask from \"./components/ProjectBoard/ProjectTask/AddProjectTask\";\nimport UpdateProjectTask from \"./components/ProjectBoard/ProjectTask/UpdateProjectTask\";\nimport Landing from \"./components/Layout/Landing\";\nimport Register from \"./components/UserManagement/Register\";\nimport Login from \"./components/UserManagement/Login\";\nimport jwt_decode from \"jwt-decode\";\nimport setJWTToken from \"./securityUtils/setJWTToken\";\nimport {SET_CURRENT_USER} from \"./actions/types\";\nimport {logout} from \"./actions/securityActions\";\nimport SecureRoute from \"./securityUtils/SecureRoute\";\n\nconst jwtToken = localStorage.jwtToken;\nif (jwtToken) {\n    setJWTToken(jwtToken);\n    const decoded_jwtToken = jwt_decode(jwtToken);\n    store.dispatch({\n        type: SET_CURRENT_USER,\n        payload: decoded_jwtToken\n    });\n\n    const currentTime = Date.now() / 1000;\n    if (decoded_jwtToken.exp < currentTime) {\n        store.dispatch(logout());\n        window.location.href = \"/\";\n    }\n}\n\nclass App extends Component {\n    render() {\n        return (\n            <Provider store={store}>\n                <Router>\n                    <div className=\"App\">\n                        <Header/>\n\n                        <Route exact path=\"/\" component={Landing}/>\n                        <Route exact path=\"/register\" component={Register}/>\n                        <Route exact path=\"/login\" component={Login}/>\n                        <Switch>\n                            <SecureRoute exact path=\"/dashboard\" component={Dashboard}/>\n                            <SecureRoute exact path=\"/addProject\" component={AddProject}/>\n                            <SecureRoute exact path=\"/updateProject/:id\" component={UpdateProject}/>\n                            <SecureRoute exact path=\"/projectBoard/:id\" component={ProjectBoard}/>\n                            <SecureRoute exact path=\"/addProjectTask/:id\" component={AddProjectTask}/>\n                            <SecureRoute exact path=\"/updateProjectTask/:backlog_id/:pt_id\"\n                                         component={UpdateProjectTask}/>\n                        </Switch>\n                    </div>\n                </Router>\n            </Provider>\n        );\n    }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}